

import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.PixelGrabber;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.GZIPInputStream;

import javax.imageio.ImageIO;

public class Carcker {
	private static final List<CharInfo> words_ = new ArrayList<>();
	private BufferedImage image;
	private int width;
	private int height;
	public Carcker(BufferedImage image) {
		this.image = image;
		width = image.getWidth();
		height = image.getHeight();
	}
	public static final byte[] bytes = { 0x1f, 0xffffff8b, 0x8, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x4, 0x0, 0xffffffc5, 0x58, 0xffffffd9, 0xffffff92, 0x13,
			0x31, 0xc, 0xffffff94, 0xffffff9e, 0xffffff93, 0xc, 0x61,
			0xffffff97, 0x2f, 0xffffffe1, 0x58, 0xffffffe0, 0xffffff91,
			0xffffff9b, 0xffffff82, 0x62, 0xb, 0x58, 0xffffffee, 0xffffffff,
			0xffffffff, 0x10, 0xffffffd8, 0xffffffcc, 0xffffffc8, 0xffffffea,
			0xffffff96, 0x6c, 0xffffff8f, 0x13, 0x48, 0xffffffe1, 0xffffffaa,
			0x4d, 0x46, 0xffffff96, 0x6d, 0xffffffb5, 0xffffff8e, 0xffffff96,
			0x67, 0x73, 0x7f, 0x3b, 0x9, 0xe, 0x25, 0x41, 0x49, 0xffffffa3,
			0xffffffae, 0xffffffd7, 0x5b, 0xffffffa9, 0xffffffa8, 0xffffffd5,
			0xffffffb4, 0x76, 0x2, 0x6a, 0x5c, 0x52, 0xffffff94, 0x54,
			0xffffffed, 0x18, 0x5a, 0x7f, 0x18, 0x0, 0x0, 0xffffff84, 0x7,
			0x1b, 0xffffff80, 0x4a, 0xffffff9a, 0x8, 0x35, 0xffffffb8,
			0xffffff81, 0x50, 0xffffffe7, 0xffffffad, 0xffffffbe, 0xffffffc4,
			0xffffff8e, 0xffffffb1, 0x4f, 0x2d, 0x5f, 0xffffffba, 0xffffff80,
			0xffffffbb, 0xfffffffd, 0xffffff9a, 0xffffffad, 0x19, 0x36,
			0xffffffe5, 0xffffffad, 0xffffff87, 0xfffffff1, 0x10, 0xffffffc0,
			0xffffff8d, 0xffffffc6, 0x50, 0x40, 0x52, 0xfffffff8, 0xffffffb3,
			0xffffff98, 0x2c, 0xffffffd6, 0xffffffec, 0x59, 0xffffffe7, 0xd,
			0x3e, 0xf, 0xffffff93, 0x3e, 0x1d, 0x2, 0x7a, 0x18, 0xffffff8f,
			0xffffffb6, 0xffffffc7, 0x46, 0x4e, 0x1, 0xffffffa3, 0xffffff96,
			0xffffffdc, 0x3a, 0x20, 0x77, 0xffffffbf, 0x2c, 0x24, 0xffffffe4,
			0xffffff80, 0xffffffa9, 0x20, 0x14, 0xffffffe5, 0x2d, 0xffffffb5,
			0x68, 0xffffffc9, 0x55, 0xffffff89, 0x23, 0xffffff96, 0xffffff82,
			0xffffffaa, 0xffffffba, 0x58, 0xffffffa6, 0x3, 0x38, 0x71, 0x4b,
			0x29, 0xffffffd2, 0x47, 0xffffff80, 0xffffffe3, 0xffffff84,
			0xffffff91, 0xfffffff4, 0x78, 0x43, 0x64, 0x41, 0x7b, 0x73,
			0xffffff99, 0xffffff80, 0x42, 0x48, 0x0, 0xffffffde, 0x0, 0x12,
			0xffffff88, 0xffffff80, 0xffffffdb, 0x51, 0x4a, 0x49, 0xffffff84,
			0x43, 0xfffffff6, 0x51, 0xffffff90, 0x27, 0x21, 0xffffffc9,
			0xfffffff8, 0xffffffac, 0x0, 0x4d, 0xffffffcd, 0x46, 0x9,
			0xffffff9d, 0x15, 0x78, 0xffffffe0, 0x0, 0x1e, 0x44, 0x2a, 0x51,
			0xffffff8c, 0xffffffbc, 0xffffffd3, 0xffffffa3, 0x68, 0xffffff8a,
			0xffffffd5, 0x3a, 0x20, 0x79, 0xffffffba, 0x4d, 0x71, 0x4c, 0xb,
			0xffffff91, 0xffffff98, 0xffffff90, 0x7b, 0x2a, 0x42, 0xffffffc5,
			0x78, 0x7a, 0xfffffffc, 0xffffffd5, 0x1b, 0x4b, 0x9, 0xffffffa7,
			0x27, 0xffffff99, 0x38, 0x5, 0x1, 0xffffffc2, 0xffffff80, 0x39,
			0xffffff9c, 0x67, 0xffffffbb, 0x4e, 0x7f, 0x6c, 0x33, 0xffffffdd,
			0xffffffed, 0xffffff87, 0x55, 0xffffffda, 0x5d, 0xffffffb5, 0x56,
			0x33, 0xffffffc6, 0xfffffff9, 0xffffffea, 0x60, 0x64, 0xffffffcf,
			0xffffffa7, 0x41, 0xffffffe0, 0x5c, 0x1c, 0xffffffc4, 0xffffffb2,
			0x25, 0xffffffa3, 0xffffff89, 0xffffff88, 0xffffff8d, 0x16, 0x0,
			0xffffffb5, 0xffffffed, 0xffffffa5, 0x22, 0xffffff9d, 0x52, 0x41,
			0x53, 0xffffff8d, 0xffffff92, 0x7f, 0x31, 0x51, 0x3f, 0xffffffa8,
			0x0, 0xffffff85, 0xffffff8a, 0x71, 0x10, 0xffffff92, 0x78,
			0xffffffc4, 0x59, 0x8, 0x39, 0x69, 0xffffffa9, 0x38, 0x41, 0x48,
			0xfffffff7, 0x40, 0x5a, 0x3, 0xffffffd5, 0x3a, 0xfffffff5,
			0xffffffe5, 0xffffff9d, 0x33, 0x66, 0xffffffc3, 0xffffffd7, 0x1f,
			0xffffffef, 0xffffff94, 0xffffffa0, 0x53, 0xffffffea, 0xfffffff4,
			0x15, 0xffffffb2, 0x1c, 0x40, 0x2d, 0xffffffcf, 0xffffffaf,
			0xffffffce, 0xffffffe9, 0xffffffd4, 0x7a, 0xffffff89, 0x9,
			0xffffffe6, 0xffffffdd, 0xffffffdb, 0xe, 0xffffffb8, 0x58,
			0xffffffa7, 0x60, 0x37, 0xfffffffd, 0xfffffff2, 0xfffffffa, 0x2c,
			0x4e, 0x51, 0xffffff87, 0xd, 0xfffffffc, 0x16, 0x72, 0x2a, 0x5f,
			0xffffffc0, 0xffffff80, 0xfffffff0, 0x54, 0xffffffa7, 0xffffffde,
			0xfffffffc, 0x15, 0xffffff8b, 0xffffff9a, 0x36, 0x3a, 0x2c, 0x62,
			0xfffffffc, 0xffffffd4, 0xffffff8c, 0x31, 0xffffffb7, 0xffffffea,
			0xffffffd7, 0x26, 0xffffffc4, 0xffffffaf, 0x75, 0xffffffea,
			0xffffffdb, 0xffffff8b, 0xffffffff, 0xffffff9b, 0xffffff9b, 0x50,
			0x7e, 0xfffffffe, 0x15, 0xffffffab, 0x17, 0x2f, 0xffffff96,
			0xffffff96, 0xffffffbd, 0xffffffaa, 0xffffff87, 0xffffffdd, 0x77,
			0xffffffa3, 0x77, 0xffffffd3, 0xffffff85, 0xfffffff0, 0xffffffe0,
			0x58, 0xffffffd5, 0xfffffff6, 0xffffff8c, 0xffffffcd, 0xffffffc4,
			0x63, 0x52, 0x12, 0x48, 0x46, 0xf, 0xffffff93, 0x5a, 0xffffffe3,
			0xffffffea, 0x24, 0x67, 0x73, 0x63, 0xffffffa0, 0xffffffdf,
			0xffffffdf, 0x3d, 0x67, 0xfffffff6, 0xffffffa9, 0xfffffffc,
			0xffffffed, 0x8, 0xffffffe3, 0xffffff82, 0x57, 0x8, 0x35, 0x47,
			0x68, 0xffffff9c, 0x1, 0x40, 0xffffff87, 0xffffff8b, 0xffffffbd,
			0xc, 0xffffffb3, 0xfffffff4, 0xffffffe1, 0x72, 0xffffffd7, 0x54,
			0x62, 0xfffffffd, 0x40, 0xffffffed, 0xffffff99, 0xffffffa6, 0x7e,
			0x2b, 0xffffffe4, 0xffffffb4, 0xffffffc4, 0x62, 0xd, 0x79,
			0xffffffae, 0x1b, 0xffffffd7, 0xfffffff4, 0x9, 0xffffffb7,
			0xffffffe1, 0x7c, 0x44, 0x9, 0xffffff9a, 0xffffffda, 0xffffffff,
			0x52, 0x6a, 0x3c, 0xffffffe1, 0xffffffc8, 0xffffffd7, 0xffffffbd,
			0xffffffbb, 0xffffffbe, 0x37, 0xfffffffc, 0xffffffd6, 0xffffffd5,
			0x4e, 0x3c, 0x40, 0x2a, 0x4b, 0x39, 0x1a, 0xffffffbd, 0x2a,
			0xffffffcd, 0xffffffc1, 0x18, 0x59, 0x40, 0x62, 0x78, 0xffffffec,
			0x63, 0x19, 0x72, 0xfffffff0, 0xffffffcf, 0xfffffff8, 0x38,
			0xfffffffa, 0x42, 0x3a, 0xffffffc8, 0x2, 0xffffffec, 0x5b,
			0xffffffeb, 0xffffff8d, 0xffffffae, 0xfffffff1, 0x45, 0xffffffdd,
			0x32, 0xffffff98, 0x35, 0x3c, 0xffffff9f, 0xffffffa6, 0x3d,
			0xffffffce, 0x13, 0xffffffce, 0xffffff94, 0x38, 0xffffff87, 0x0,
			0xffffff8d, 0xffffff85, 0xffffffc4, 0x70, 0x17, 0x26, 0xe,
			0xffffffa6, 0x1e, 0x16, 0xffffffcb, 0xffffffbf, 0x52, 0xffffffdf,
			0x29, 0x63, 0xffffffc4, 0xfffffff6, 0xffffff8c, 0x35, 0xffffffba,
			0xfffffff2, 0xfffffff9, 0x1f, 0xffffffbf, 0x73, 0x1f, 0xffffff91,
			0x1b, 0xffffff9e, 0x24, 0x5e, 0x63, 0x22, 0xffffff82, 0x23, 0x5,
			0x19, 0xffffffb9, 0x71, 0x73, 0xffffffdc, 0xffffffcf, 0x5,
			0xffffff88, 0xffffff94, 0x71, 0xffffffdb, 0xffffffdd, 0x48, 0x10,
			0xffffffd5, 0x55, 0xffffffb3, 0x52, 0xffffffc3, 0x1b, 0x1,
			0xffffff94, 0x13, 0x74, 0xffffff94, 0x3a, 0xffffff80, 0x2f, 0x39,
			0xffffffe2, 0x75, 0xe, 0xfffffff2, 0xffffffc6, 0x18, 0xffffffdc,
			0x46, 0xfffffffc, 0xfffffff3, 0xffffffea, 0x14, 0xffffff80,
			0xffffffc1, 0xffffffce, 0x24, 0xffffffee, 0x72, 0xffffffed,
			0xffffff94, 0xffffffaf, 0xfffffffb, 0xffffffa9, 0xffffffaa, 0x4a,
			0xffffffe0, 0xffffffd4, 0x22, 0xffffffc6, 0xfffffff0, 0x57, 0x1d,
			0xffffff8e, 0xffffffd2, 0xffffff90, 0xffffffc6, 0xc, 0xffffffd3,
			0xffffff9a, 0x53, 0xfffffffb, 0xffffffd6, 0xffffffb7, 0xffffffdd,
			0x14, 0xffffffd4, 0xffffffbd, 0x41, 0xffffffa7, 0xffffff80, 0x7b,
			0x23, 0xfffffffe, 0x34, 0x56, 0xd, 0xffffff96, 0x46, 0x2,
			0xfffffffe, 0xfffffffd, 0xffffffb2, 0x0, 0x5f, 0x1, 0xffffff9c,
			0xffffffa0, 0x32, 0x39, 0xffffffd7, 0xffffff90, 0xffffffc2, 0x6c,
			0xffffffc7, 0x4e, 0x68, 0xffffff88, 0x7d, 0xffffff9f, 0xffffff9b,
			0xffffffcf, 0xffffffa7, 0xffffffbe, 0xffffffa0, 0xfffffffc, 0x18,
			0x7d, 0x7, 0x5b, 0xffffffa9, 0xffffffbe, 0x56, 0x1f, 0x67, 0x1a,
			0x4a, 0xffffff91, 0xffffff9c, 0x4, 0x38, 0x53, 0x6b, 0x70, 0x68,
			0xffffff8f, 0xffffffea, 0xfffffff4, 0x34, 0xffffff87, 0x7f, 0x6e,
			0xffffff82, 0xffffffc3, 0xffffffc1, 0xffffffab, 0x40, 0xffffffc4,
			0x50, 0x13, 0xe, 0x33, 0x5d, 0x67, 0x7d, 0x1, 0x1f, 0xffffffdb,
			0xffffffc0, 0x7f, 0xffffffed, 0xffffff87, 0x7f, 0xffffffbc, 0xf,
			0x75, 0xffffffe0, 0xffffffa5, 0xffffffba, 0xffffffc0, 0xffffff84,
			0x3d, 0x24, 0x4, 0xffffffe0, 0xfffffff1, 0x16, 0x41, 0x3b, 0x74,
			0xffffffd2, 0x52, 0xffffffc5, 0xfffffff8, 0x7c, 0x12, 0xfffffffb,
			0xffffffe4, 0x37, 0x5b, 0xfffffffb, 0x57, 0x11, 0xffffffa1, 0x18,
			0x0, 0x0 };
	static {
		ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
		try {
			GZIPInputStream gis = new GZIPInputStream(bais);
			InputStreamReader isr = new InputStreamReader(gis);
			while (true) {
				char ch = (char) isr.read();
				if (ch == '\0') {
					break;
				}
				int _width = isr.read();
				int _height = isr.read();
				boolean[][] bool = new boolean[_width][_height];
				for (int i = 0; i < _width; i++) {
					for (int j = 0; j < _height; j++) {
						bool[i][j] = isr.read() != 0;
					}
				}
				words_.add(new CharInfo(ch, bool));
			}
			isr.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	public String read() {
		String result = "";
		boolean[][] table = toTable();
		int next = searchNext(table, -1);
		while (next < width - 7) {
			MatchedChar matched = match(table, next);
			if (matched.Rate > 0.6) {
				result += matched.Char;
				next = matched.X + 10;
			} else {
				next += 1;
			}
		}
		return result;
	}
	private int searchNext(boolean[][] table, int start) {
		int _width = table.length;
		int _height = table[0].length;
		for (start++; start < _width; start++)
			for (int j = 0; j < _height; j++)
				if (table[start][j])
					return start;
		return start;
	}
	private boolean[][] toTable() {
		boolean[][] table = new boolean[width][height];
		ColorModel cm = ColorModel.getRGBdefault();
		int[][] pix = toPixs();
		for (int i = 0; i < width; i++)
			for (int j = 0; j < height; j++) {
				int color = pix[i][j];
				table[i][j] = (cm.getRed(color) + cm.getGreen(color)
						+ cm.getBlue(color) < 500);
			}
		return table;
	}
	private int[][] toPixs() {
		int[] pix = new int[width * height];
		PixelGrabber pg = new PixelGrabber(image, 0, 0, width, height, pix, 0,
				width);
		try {
			pg.grabPixels();
			int[][] result = new int[width][height];
			for (int i = 0, j = 0; i < pix.length; i++) {
				int h = i % width;
				if (h == 0 && i != 0) {
					j++;
				}
				result[h][j] = pix[i];
			}
			return result;
		} catch (InterruptedException e) {
		}
		return null;
	}
	private MatchedChar match(boolean[][] source, int start) {
		MatchedChar best = null;
		for (CharInfo info : words_) {
			MatchedChar matched = scopeMatch(source, info.getTable(), start);
			matched.Char = info.get_char();
			if (best == null || best.Rate < matched.Rate)
				best = matched;
		}
		return best;

	}
	private MatchedChar scopeMatch(boolean[][] source, boolean[][] target,
			int start) {
		int targetHeight = target[0].length;
		int sourceHeight = source[0].length;
		double max = 0;
		MatchedChar matched = new MatchedChar();
		for (int i = -2; i < 6; i++)
			for (int j = -3; j < sourceHeight - targetHeight + 5; j++) {
				double rate = fixedMatch(source, target, i + start, j);
				if (rate > max) {
					max = rate;
					matched.X = i + start;
					matched.Y = j;
					matched.Rate = rate;
				}

			}

		return matched;

	}

	private double fixedMatch(boolean[][] source, boolean[][] target, int x0,
			int y0) {
		double total = 0;
		double count = 0;
		int targetWidth = target.length;
		int targetHeight = target[0].length;
		int sourceWidth = source.length;
		int sourceHeight = source[0].length;
		int x, y;
		for (int i = 0; i < targetWidth; i++) {
			x = i + x0;
			if (x < 0 || x >= sourceWidth)
				continue;
			for (int j = 0; j < targetHeight; j++) {
				y = j + y0;
				if (y < 0 || y >= sourceHeight)
					continue;
				if (target[i][j]) {
					total++;
					if (source[x][y])
						count++;
					else
						count--;
				} else if (source[x][y])
					count -= 0.55;
			}
		}
		return count / total;
	}

	public static void main(String[] args) {
		File file = new File("d:\\testImg\\passCodeAction.jpeg");
		try {
			Carcker c = new Carcker(ImageIO.read(file));
			System.out.println(c.read());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}

class CharInfo {

	private char _char;

	private boolean[][] table;

	public CharInfo(char _char, boolean[][] table) {
		this.table = table;
		this._char = _char;
	}

	public char get_char() {
		return _char;
	}

	public void set_char(char _char) {
		this._char = _char;
	}

	public boolean[][] getTable() {
		return table;
	}

	public void setTable(boolean[][] table) {
		this.table = table;
	}

}

class MatchedChar {

	public int X;

	public int Y;

	public Character Char;

	public double Rate;
}
